#!/usr/bin/env bash
# Schleps settings and utilities to an SSH host or docker container.
# Copyright (c) 2020 Jason Jackson. MIT license.
# https://github.com/jakshin/schlep

function usage() {
	if [[ $1 == true ]]; then
		bright "Schleps settings and utilities to an SSH host or docker container\n\n"
	fi

	bright "Usage: "
	echo "$script_name [options] ssh-host-or-docker-container"
	echo "Options can be given before or after the SSH host / docker container"
	echo
	bright "Options:\n"
	echo "  -h, --help    Show this help and exit" | opt
	echo "  -q, --quiet   Operate quietly (otherwise a bit of progress is shown)" | opt
	echo
	echo "  --uninstall   Uninstall schlep's files from the remote host, then exit" | opt
	echo "                No interactive connection is made to the host"
	echo
	echo "  --user=USER   The remote user to connect as (default = root)" | opt
	echo "                User can also be given with host name, like 'user@host'"
	echo
	echo "Schlep tries to detect whether it's connecting to an SSH host or docker container,"
	echo "based on whether the host's name contains any dots (if it does, assume SSH)."
	echo "If that's an incorrect guess, you can correct it:"
	echo
	echo "  -d, --docker  The remote host is a docker container" | opt
	echo "  -s, --ssh     The remote host is an SSH server" | opt
	echo
	echo "Schlep's first action is copying its files to the remote host. By default,"
	echo "this is only done once per user, to save time on subsequent connections,"
	echo "but you can make schlep copy its files again (like if you've changed them):"
	echo
	echo "  -c, --copy    Copy schlep's files to the remote host," | opt
	echo "                even if ~/.schlep already exists there"
	echo
	echo "After copying files, schlep runs one or more install scripts. By default,"
	echo "it only installs bash settings, and only installs after copying files."
	echo
	echo "  -a, --all     Ensure all features are installed, not just bash settings" | opt
	echo
	echo "Additional options can be passed to docker, SSH, and rsync (used with SSH hosts),"
	echo "by exporting any or all of these environment variables:"
	echo '$SCHLEP_DOCKER_OPTS, $SCHLEP_DOCKER_CP_OPTS, $SCHLEP_DOCKER_EXEC_OPTS,' | var
	echo '$SCHLEP_SSH_OPTS, $SCHLEP_RSYNC_OPTS' | var
	exit
}

# Abort on any unexpected error
set -e

# Run from this script's directory
cd -- "$(dirname -- "$0")"

# Colors are nice
error='\033[38;5;160m'
bright='\033[1m'
normal='\033[0m'

function error() {
	echo -e "${error}${*}${normal}\n"
	usage
}

function bright() {
	echo -en "${bright}${*}${normal}"
}

function opt() {
	GREP_COLOR='1;37' grep -E --color=auto -- " -[a-zA-Z=-]+"
}

function var() {
	GREP_COLOR='1;37' grep -E --color=auto -- '\$[a-zA-Z_]+'
}

# Pre-parse the command line, to "explode" single-character options given together
declare -a args=()

for arg; do
	if [[ $arg == -* && $arg != --* && $arg != '-' ]]; then
		len=${#arg}
		for (( i=1; i < len; i++ )); do
			char="${arg:$i:1}"
			if [[ $char != [[:space:]] ]]; then
				args+=("-$char")
			fi
		done
	else
		args+=("$arg")
	fi
done

# Parse the command line
script_name="$(basename -- "$0")"
(( "${#args[@]}" > 0 )) || usage true

quiet=false
uninstall=false
remote_user="root"
remote_type=""
copy_files=false
install_all=false
remote_host=""

for arg in "${args[@]}"; do
	if [[ $arg == "-h" || $arg == "--help" ]]; then
		usage true
	elif [[ $arg == "-q" || $arg == "--quiet" ]]; then
		quiet=true
	elif [[ $arg == "--uninstall" ]]; then
		uninstall=true
	elif [[ $arg == "--user="* ]]; then
		remote_user="${arg/*=/}"
	elif [[ $arg == "-d" || $arg == "--docker" ]]; then
		remote_type="docker"
	elif [[ $arg == "-s" || $arg == "--ssh" ]]; then
		remote_type="ssh"
	elif [[ $arg == "-c" || $arg == "--copy" ]]; then
		copy_files=true
	elif [[ $arg == "-a" || $arg == "--all" ]]; then
		install_all=true
	elif [[ $arg == -* ]]; then
		error "Error: Invalid option: $arg"
	elif [[ -z $remote_host ]]; then
		remote_host="$arg"
	else
		error "Error: Invalid argument: $arg"
	fi
done

if [[ $remote_host == http://* || $remote_host == https://* ]]; then
	remote_host="$(echo "$remote_host" | grep -Eio "//([^/]+)/" | head -n 1)"
	remote_host="${remote_host///}"
fi

if [[ $remote_host == *@* ]]; then
	new_remote_user="${remote_host/@*/}"
	if [[ -n $remote_user && -n $new_remote_user && "$remote_user" != "$new_remote_user" ]]; then
		error "Error: Can't tell which user to connect as, $remote_user or $new_remote_user"
	fi

	remote_user="$new_remote_user"
	remote_host="${remote_host/*@/}"
fi

if [[ -z $remote_host || -z $remote_user ]]; then
	error "Error: Missing remote host or user\n"
fi

if [[ -z $remote_type ]]; then
	# Guess whether we should connect by SSH or docker exec
	[[ $remote_host == *.* ]] && remote_type="ssh" || remote_type="docker"
fi

SCHLEP_DOCKER_EXEC_OPTS="-it --user $remote_user $SCHLEP_DOCKER_EXEC_OPTS"

# Uninstall schlep from the remote, if that's what we're supposed to do
if [[ $uninstall == true ]]; then
	[[ $quiet == true ]] || echo "Uninstalling schlep's files..."
	uninstall_cmd='set -e
		if [[ -e "$HOME/.schlep" ]]; then
			find "$HOME/.schlep" -name "uninstall.sh" -exec {} --remote \;
			rm -rf "$HOME/.schlep"
			echo "Schlep has been removed from '$remote_host'"
		else
			echo "Schlep is not installed on '$remote_host'"
		fi'

	if [[ $remote_type == "docker" ]]; then
		docker $SCHLEP_DOCKER_OPTS exec $SCHLEP_DOCKER_EXEC_OPTS "$remote_host" bash -c "$uninstall_cmd"
	elif [[ $remote_type == "ssh" ]]; then
		ssh -oStrictHostKeyChecking=no -T $SCHLEP_SSH_OPTS "$remote_user@$remote_host" "$uninstall_cmd"
	fi

# Otherwise, copy files and run install scripts if needed, then connect interactively
else
	if [[ $install_all == true ]]; then
		[[ $quiet == true ]] && print_arg='' || print_arg=' -print'
		install_cmd='find "$HOME/.schlep" -name "install.sh"'$print_arg' -exec {} \;'
	else
		install_cmd='"$HOME/.schlep/bash-settings/install.sh"'
	fi

	if [[ $copy_files == false ]]; then
		installed_cmd='[[ -d "$HOME/.schlep" ]] && echo -n false || echo -n true'

		if [[ $remote_type == "docker" ]]; then
			copy_files="$(docker $SCHLEP_DOCKER_OPTS exec $SCHLEP_DOCKER_EXEC_OPTS "$remote_host" bash -c "$installed_cmd")"
			copy_files="$(echo $copy_files)"

		elif [[ $remote_type == "ssh" ]]; then
			copy_files="$(ssh -oStrictHostKeyChecking=no -T $SCHLEP_SSH_OPTS "$remote_user@$remote_host" "$installed_cmd")"
		fi
	fi

	if [[ $remote_type == "docker" ]]; then
		# Install if we need to
		if [[ $copy_files == true ]]; then
			[[ $remote_user == "root" ]] && base_path="/root" || base_path="/home/$remote_user"
			docker $SCHLEP_DOCKER_OPTS exec $SCHLEP_DOCKER_EXEC_OPTS "$remote_host" \
				bash -c 'mkdir -p "$HOME/.schlep" && echo -n '"$remote_host"' > "$HOME/.schlep/.host"'

			[[ $quiet == true ]] || echo "Schlepping files..."

			for thing in *; do
				if [[ $thing != "bin" && $thing != "LICENSE" && $thing != "README.md" ]]; then
					docker $SCHLEP_DOCKER_OPTS cp $SCHLEP_DOCKER_CP_OPTS "$thing" "$remote_host:$base_path/.schlep"
				fi
			done

			docker $SCHLEP_DOCKER_OPTS exec $SCHLEP_DOCKER_EXEC_OPTS "$remote_host" \
				bash -c 'chown -R --reference="$HOME" "$HOME/.schlep"'
		fi

		if [[ $copy_files == true || $install_all == true ]]; then
			[[ $quiet == true ]] || echo "Installing..."
			docker $SCHLEP_DOCKER_OPTS exec $SCHLEP_DOCKER_EXEC_OPTS "$remote_host" bash -c "$install_cmd"
		fi

		# Connect interactively
		exec docker $SCHLEP_DOCKER_OPTS exec $SCHLEP_DOCKER_EXEC_OPTS "$remote_host" bash

	elif [[ $remote_type == "ssh" ]]; then
		# Install if we need to
		if [[ $copy_files == true ]]; then
			[[ $quiet == true ]] || echo "Schlepping files..."
			rsync -DlpqRrtu --exclude=".git" --exclude="bin" --exclude="LICENSE" --exclude="/README.md" \
				$SCHLEP_RSYNC_OPTS ./ "$remote_user@$remote_host:~/.schlep"

			ssh -oStrictHostKeyChecking=no -T $SCHLEP_SSH_OPTS "$remote_user@$remote_host" \
				"echo -n $remote_host > \"\$HOME/.schlep/.host\""
		fi

		if [[ $copy_files == true || $install_all == true ]]; then
			[[ $quiet == true ]] || echo "Installing..."
			ssh -T $SCHLEP_SSH_OPTS "$remote_user@$remote_host" "$install_cmd"
		fi

		# Connect interactively
		exec ssh -t $SCHLEP_SSH_OPTS "$remote_user@$remote_host"
	fi
fi
